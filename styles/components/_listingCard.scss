.listingCard {
  width: 225px;
  height: 283px;
  border-style: solid;
  border-width: 1px;
  font-size: $tx5b;
  cursor: pointer;

  .gridViewContent {
    .listingImage {
      width: 223px;
      height: 225px;
      position: relative;
      background-size: cover;
    }

    .listingIcons {
      position: absolute;
      top: 8px;
      right: 8px;
    }
    .listingCont {
      position: absolute;
      left: 8px;
      top: 8px;
    }
  }

  .overlayPanel {
    display: none;
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    align-items: center;
    justify-content: center;
    z-index: 1; // so it's above the overlay icons
  }

  .editOverlay {
    .btn:not(.iconBtnSm) {
      z-index: 1;
      border-left-width: 0;

      &:first-of-type {
        border-left-width: 1px;
      }
    }
  }

  &:hover:not(.listingDeleting):not(.listingDeleted) {
    .editOverlay {
      display: flex;
    }

    &.ownListing {
      border-color: $focusedBorder;
      border-bottom-width: 1px;
    }
  }

  .deleteOverlay {
    .deletingText, .deletedText {
      display: none;
    }
  }

  &.listingDeleting,
  &.listingDeleted {
    cursor: default;
    pointer-events: none;

    .deleteOverlay {
      display: flex;

      .deletingText, .deletedText {
        z-index: 1;
      }
    }
  }

  &.listingDeleting {
    .deleteOverlay {
      .deletingText {
        display: block;
      }

      .deletedText {
        display: none;
      }
    }
  }

  &.listingDeleted {
    .deleteOverlay {
      .deletingText {
        display: none;
      }

      .deletedText {
        display: block;
      }
    }
  }

  .listViewContent {
    display: none;

    .listingImage {
      width: 45px;
      height: 45px;
      background-size: cover;
    }
  }

  // Some assumptions here:
  // a.) We will only potentially have a "list view" style card
  //     when the listingCard is inside a .listingsGrid.
  // b.) The .listingsGridListView class will be applied to the
  //     .listingsGrid element as opposed to each individual card.
  //     This is so as you toggle to/from grid/list view, you only
  //     change one class on a parent element and consequently have
  //     only one DOM reflow/repaint.
  .listingsGridListView & {
    padding: $pad;
    display: block;
    width: 100%;
    height: auto;

    .listViewContent {
      display: block;
    }

    .gridViewContent {
      display: none;
    }

    // This isn't ideal, but there's inconistent spacing / widths of cols, plus there's variable
    // content width on the price (e.g. some currencies may have quite large numbers)
    .priceCol {
      padding-right: 20px;
    }

    .freeShipCol {
      padding-right: 20px;
    }
  }
}
